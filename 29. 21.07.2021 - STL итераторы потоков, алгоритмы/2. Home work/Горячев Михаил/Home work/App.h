#pragma once
#include "pch.h"
#include "Utils.h"

#include "menu.h"
#include "MenuItem.h"

#include <iterator>
#include <algorithm>
#include <functional>

#include <vector>
#include "Functor.h"
#include "Bus.h"

/*
*	Задача 1. При помощи STL, с использованием алгоритмов, функциональных объектов, 
*	потоковых итераторов написать консольное приложение, обрабатывающее векторы по заданию:
*	•	Сформировать вектор из случайных вещественных чисел, диапазон генерации 
*		вводите с клавиатуры. Сохранить вектор в форматированном потоке вывода при помощи
*		потокового итератора
*	•	Прочитать вектор из форматированного потока ввода при помощи потокового итератора.
*		Умножить все элементы вектора на 2. Сохранить вектор в форматированном потоке вывода
*		при помощи потокового итератора
*	•	Прочитать вектор из форматированного потока ввода при помощи потокового итератора.
*		Упорядочить вектор по правилу – положительные в начало вектора. Вывести вектор с 
*		цветовым выделением положительных элементов
*	•	Прочитать вектор из форматированного потока ввода при помощи потокового итератора. 
*		Упорядочить вектор по убыванию. Вывести вектор с цветовым выделением отрицательных 
*		элементов
*	
*	Задача 2. Сведения о каждом автобусе содержат: регистрационный номер автобуса, фамилию
*	и инициалыводителя, назначенный номер маршрута, фактический номер маршрута.
*	
*	Нахождение в парке – особый маршрут с номером «0», в состав номера маршрута входят как
*	цифры, так и буквы, например – «42», «42а», «32в».Коллекцию заявок постройте на классе 
*	vector. Хранить коллекцию в форматированном потоке вывода, запись/чтение файла реализуйте
*	при помощи потокового итератора. При первом запуске приложения запишите начальные данные 
*	в файл из вектора инициирующих значений.
*	
*	Программа должна обеспечивать выбор с помощью меню и выполнение одной из следующих функций:
*	•	запись данных об автобусах в текстовый файл (форматированный поток вывода)
*	•	чтение данных об автобусах из текстового файла(форматированного потока ввода)
*	•	вывод данных об автобусах при помощи алгоритма for_each()и анонимного функтора
*	•	упорядочить коллекцию автобусов по регистрационным номерам при помощи алгоритма sort() 
*		и анонимного функтора – компаратора;
*	•	упорядочить коллекцию автобусов по фамилии и инициалам водителя при помощи алгоритма sort()
*		и анонимного функтора – компаратора;
*	Постарайтесь свести к минимуму использование циклов – максимально используйте алгоритмы STL.
*/

// TODO: прикладная часть - полезная работа приложения - бизнес-логика приложения
class App
{
public:

	// размер вектора 

private:

	// вектор вещественных чисел 
	vector<double> sourceVec_;

	// имя текстового файла для первого задания 
	string nameTextFile_ = "vector.txt";

	// вектор автобусов
	vector<Bus> buses_;

	// файл для автобусов
	string busText_ = "buses.txt";

public:

#pragma region Задания 

#pragma region Задание 1. Демонстрация алгоритмов на векторе

	// Задание 1. Демонстрация алгоритмов на векторе
	void task1();

	// Заполенение вектора случайными вещёственными числами
	void fillVector();

	// Чтение вектора из форматированного потока ввода и умножение на 2
	void posTwo();

	// Упорядочивание вектора по правилу - положительные в начало вектора
	void sortByPos();

	// Упорядочивание вектора по правилу - положительные в начало вектора
	void sortByDecr();

	// сохранение вектора в текстовый файл
	void saveTextVector(vector<double>& vec, string nameFile);

	// загрузка вектора из текстового файла 
	void loadTextVector(vector<double>& vec, string nameFile);

	// вывод вектора 
	void showVector(vector<double>& vec, string name, string specific, short colorElem);

	// вывод линии для таблицы
	void showLineVector();

	// вывод сообщения об отсутвии данных для таблицы
	void showEmptyVector();

	// вывод вектора с подсветкой положительных элементов
	void showVectorColor(vector<double>& vec, string name, string specific, short colorElem, short backlight);

#pragma endregion 

#pragma region Задание 2. Автобусный парк

	// Задание 2. Автобусный парк
	void task2();

	// Вывод сведений обо всех автобусах
	void printAll();

	// Начальное формирование коллекции данных обо всех автобусах
	void createPark();

	// Запись данных об автобусах в текстовый файл
	void saveBusFile();

	// Въезда автобуса в парк
	void loadBusFile();

	// Вывод сведений обо всех автобусах
	void sortByNumber();

	// Вывод сведений обо всех автобусах
	void sortByName();

	// сохранение vector в файл 
	void saveBus(vector<Bus>& vecBus, string nameFile);

	// загрузка vector из файла 
	void loadBus(vector<Bus>& vecBus, string nameFile);

	// вывод шапки таблицы
	void showHeadBus(vector<Bus>& vecBus, string name, string specific);

	// вывод map автобусов
	void showBus(vector<Bus>& vecBus, string name, string specific);

	// вывод автобуса для таблицы
	void showBusElem(vector<Bus>& vecBus);

	// вывод линии-разделителя
	void showLineBus();

	// вывод "пустоты" 
	void showEmptyBus();

	// проверка на наличие файла 
	bool isFile(string nameFile);

#pragma endregion

#pragma endregion

};

