#pragma once
#include "pch.h"
#include "Utils.h"
#include "Airline.h"
#include "Plane.h"
#include "App.h"
#include "ShowOnePlaneTable.h"

/*
	Напишите консольное многофайловое приложение с использованием ООП по следующему 
	заданию. Примените меню из классной работы для организации простого интерфейса пользователя.
	Разработайте класс Plane с полями для хранения:
	•	производителя и типа самолета (например: Ил-76, Boeing 747, …)
	•	количества пассажирских мест (от 0 до 1000)
	•	текущее количество пассажиров (от 0 до количества пассажирских мест)
	•	расхода горючего за час полета (вещественное число, от 0.1 до 20000 кг/ч)
	•	стоимости самолета (от 1 до 300 000 000)
	•	регистрационный номер самолета (например: UR-DAD, UR-CCF, …).
	В классе Plane разработать:
	•	Конструкторы: по умолчанию, с параметрами, копирующий, деструктор
	•	Геттеры и сеттеры для всех полей класса, в сеттерахвыбрасывать исключение
	при обнаружении некорректного значения
	•	Метод, вычисляющий расход горючего за час полета на одно пассажирское место
	(поделить расход горючего за час на количество пассажирских мест)
	•	Переопределить операции:
	o	+ добавление заданного количества пассажиров
	o	–уменьшение количества пассажиров на заданное значение
	o	операции сравнения: <<= == != >= > для сравнения двух объектов по стоимости самолета
	Разработайте класс Airline, представляющий авиакомпанию. Поля класса:
	•	название компании
	•	динамический массив самолетов – объектов класса Plane
	•	количество самолетов в массиве
	Реализуйте:
	•	инициализацию массива самолетов
	•	вывод данных авиакомпании в табличном формате – перегрузите операцию вывода <<
	•	добавьте по 10 пассажиров каждому самолету компании
	•	уменьшите количество пассажиров каждого самолета на 3
	•	методом класса перегрузите унарную операцию ! для поиска первого самолета с 
	максимальной стоимостью
	•	дружественной функцией перегрузите унарную операцию – для поиска первого самолета
	с минимальной стоимостью
	•	методом класса перегрузите бинарную операцию * для увеличения стоимости самолетов
	на заданный коэффициент (положительный, например, 1.5 – удорожание в полтора раза)
	•	методом класса перегрузите операцию [] для доступа к элементам массива самолетов,
	продемонстрируйте работу этой операции
	Комментирование кода – обязательное требование.
*/

// TODO: прикладная часть - полезная работа приложения - бизнес-логика приложения
class App
{
	// объект класса Airline
	Airline air;

public:

	// конструктор по умолчанию 
	App();

	// Вывод самлётов
	void outPlanes();
	
	// Вывод самолёта по индексу
	void outPlaneIndex();
		
	// Сортировка самолёта по текущему количеству пассажиров
	void sortByCountPassangers();

	// Сортировка самолёта по регистрационному номеру
	void sortByNumber();

	// Сортировка самолёта по часовому расходу горючего
	void sortByFuel();

	// Сортировка самолёта по дальности полёта
	void sortByDistance();

	// добавление самолёта в массив
	void addPlane();

	// Вывод данных авиакомпании в табличном виде с выделением цветом
	// самолетов с максимальной и минимальной дальностями полета
	void outTableColor();

	// компаратор сравнения по текущему количеству пассажиров
	static int compareByCount_passengers(const Plane& pl1, const Plane& pl2);

	/// компаратор сравнения по регистрационному номеру
	static int compareByNumber(const Plane& pl1, const Plane& pl2);

	/// компаратор сравнения по часовому расходу горючего
	static int compareByFuel(const Plane& pl1, const Plane& pl2);


};

