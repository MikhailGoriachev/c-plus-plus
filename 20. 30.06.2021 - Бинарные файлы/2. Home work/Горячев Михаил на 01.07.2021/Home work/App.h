#pragma once
#include "pch.h"
#include "Utils.h"
#include "Television.h"
#include "Queue.h"

/*
	Задача 1.
	Реализуйте класс Television, представляющий данные о телевизоре в ремонтной
	мастерской.Приватные поля класса:
		•	производитель телевизора – char *
		•	модель телевизора – char *
		•	диагональ экрана в дюймах – double
		•	строка с описанием дефекта – char *
		•	строка с фамилией и инициалами мастера – char *
		•	строка с фамилией и инициалами владельца – char *
		•	стоимость ремонта в рублях – int
	Для класса разработайте аксессоры (геттеры и сеттеры), конструкторы (в т.ч. explicit
	инициирующий конструктор), перегрузите операции присваивания, ввода и вывода.
	Конструктор по умолчанию формирует пустые поля – при разработке сеттеров считайте
	нулевые значения допустимыми.
	Создайте очередь телевизоров, ожидающих ремонта – экземпляр класса Queue<Television>,
	инициируйте очередь не менее чем 12ю экземплярами телевизоров. Закодируйте обработки:
		•	выведите очередь в консоль, с использованием итератора сохраните очередь в
			бинарный файл с именем televisions.bin, очистите очередь, без использования
			итератора загрузите данные из бинарного файла televisions.bin в очередь, выведите
			очередь в консоль
		•	скопировать в отдельную очередь Queue<Television> телевизоры заданного мастера.
			Фамилию и инициалы мастера вводите с клавиатуры. Сформированную очередь сохраните
			в бинарный файл с именем selected.bin, выведите данные из этого файла в консоль
*/


// TODO: прикладная часть - полезная работа приложения - бизнес-логика приложения
class App
{
	// очередь телевизоров, ожидающих ремонта
	Queue<Television> queTel_;

public:
	// констркуктор по умолчанию 
	App()
	{
		// инициализация очереди телевизоров, ожидающих ремонта
		Television televisions[12] =
		{
			Television("LG", "75NANO996NA", 75, "Неисправность матрицы", "Лапин А.М.", "Аксёнов М.П.", 50'000),
			Television("Sony", "XR55A90JCEP", 55, "Неисправность блока инвертора", "Кузнецов А.И.", "Терентьев В.И.", 5'250),
			Television("Sony", "KD75X81JCEP", 75, "Неисправность блока питания", "Лапин А.М.", "Доронин Г.М.", 3'600),
			Television("LG", "43UN74006LB", 43, "Неисправность блока инвертора", "Морозов Ф.П.", "Большаков К.В.", 6'800),
			Television("Gazer", "TV32-HS2", 32, "Неисправность матрицы", "Кузнецов А.И", "Зимин И.Д.", 7'000),
			Television("Haier", "DH1U64D00RU", 32, "Неисправность блока инвертора", "Лапин А.М.", "Мамонтов Б.А.", 3'200),
			Television("Kivi", "32H710KB", 32, "Неисправность блока питания", "Морозов Ф.П.", "Ковалёв Д.С.", 2'950),
			Television("Hisense", "40B6700PA", 40, "Неисправность блока инвертора", "Лапин А.М.", "Бирюков Т.И.", 4'300),
			Television("Hisense", "55A7400F", 55, "Неисправность матрицы", "Морозов Ф.П.", "Цветков Е.П.", 8'000),
			Television("Samsung", "UE43TU7100UXUA", 43, "Неисправность блока питания", "Кузнецов А.И.", "Фокин О.В.", 2'500),
			Television("Samsung", "QE50Q60TAUXUA", 50, "Неисправность блока инвертора", "Лапин А.М.", "Горбунов Е.К.", 3'700),
			Television("Philips", "43PUS7505/12", 43, "Неисправность блока питания", "Морозов Ф.П.", "Колесников Е.Н.", 1'950),
		};

		// добавление массива в список
		queTel_.enqueueAll(televisions, 12);
	}

	// конструктор копирующий
	App(const App& app) : App() {}

	// деструктор 
	~App() = default;

	// перегрузка операции присваивания
	App& operator=(const App & app) = default;

#pragma region Задания

	// Сохранение и загрузка данных из бинарного файла
	void saveOnRead();

	// Сохранение очереди для одного местера в отдельный файл
	void saveRepairer();

	// вывод данных в цвете
	void printQueue(Queue<Television>& queue);

	// запись очереди в файл
	void writeQue(FILE* file, Queue<Television>& queue);

	// считывание очереди из файла
	void readQue(FILE* file, Queue<Television>& queue);

	// создание очереди из исходной по мастеру 
	bool queByRepairer(const char* repairer, Queue<Television>& result);

	// вывод заголовка для таблицы
	void showHead();

	// вывод конца таблицы
	void showTail();

#pragma endregion

};

