// Разработать класс по следующему заданию:
//     • Конструкторы: по умолчанию, с параметрами, копирующий, 
// 	     а также деструктор
//     • Геттеры и сеттеры для всех полей класса 
//     • Перегрузка операций ввода, вывода
//     • Методы ввода из текстового файла (каждый параметр занимает 
// 	     одну строку файла) и вывода в текстовый файл
// 
// В функции main() создать три динамические переменные – объекты класса, 
// вызвать все методы класса для демонстрации их работы, записать объекты 
// в текстовый файл, прочитать объекты из текстового файла. 
// 
// Класс Игрушка с полями для хранения:
//     • названия игрушки, 
// 	   • названия производителя,
//     • веса игрушки (в г), 
//     • возрастной категории (в годах: 3, 4, 5, ...), 
//     • цены игрушки (в рублях, без копеек), 
// Определить игрушку/игрушки с самым коротким названием производителя,
// использовать перегруженную операцию <

#include "pch.h"
#include "Toy.h"
#include "Utils.h"

void foo(Toy toy);
Toy bar(Toy toy);

int main()
{
	// настройка вывода в консоль
	init(L"02.06.2021 - динамчиеские поля, копирующий конструктор, перегрузка операции присваивания");

    // защита блока обрабатываемого кода от ошибок
    try {
        Toy *pToy1 = new Toy("Мячик", "ДонИгрушка", 40, 3, 45);
        Toy *pToy2 = new Toy("Автокран", "ИгроМир", 1200, 8, 550);
        Toy *pToy3 = new Toy("Квадрокоптер", "Чунь Мэнь Бао", 800, 15, 15550);

        // демонстрация работы сеттеров
        //
        // вывод данных по созданным объектам
        cout<< "\n\n\tОбъекты класса Toy:"
            << "\n\tИгрушка1: " << *pToy1
            << "\n\tИгрушка2: " << *pToy2
            << "\n\tИгрушка3: " << *pToy3 << "\n\n";

        #pragma region Игрушка с самым коротким названием
        // определение игрушки с самым кортким названием производителя
        Toy *pShortestBrand;
        if (*pToy1 < *pToy2 && *pToy1 < *pToy3)
            pShortestBrand = pToy1;
        else if (*pToy2 < *pToy3)
            pShortestBrand = pToy2;
        else
            pShortestBrand = pToy3;

        // вывод результата с использованием геттеров - для демонстрации
        // работы геттера
        cout<< "\n\tИгрушка с кратчайшим названием производитля:\n\t"
            << pShortestBrand->getName() << ", " << pShortestBrand->getBrand()
            << ", " << pShortestBrand->getAge() << "+, "
            << fixed << setprecision(3) << pShortestBrand->getWeight() << " г., "
            << pShortestBrand->getPrice() << " руб." <<  "\n";
        #pragma endregion

        // имя файла и буфер формирования сообщений об ошибках
        const char *fileName = "toys.txt";
        char buf[80];

        #pragma region Запись трех объектов в текстовый файл
        cout << "\n\n\tЗапись объектов в текстовый файл \"" << fileName << "\"\n";
        // открыть файл для записи
        FILE *f = fopen(fileName, "w");
        if (!f) {
            sprintf(buf, "Не могу открыть файл \"%s\" для записи", fileName);
            throw exception(buf);
        } // if

        // собственно запись в текстовый файл
        pToy1->put(f);
        pToy2->put(f);
        pToy3->put(f);

        // закрытие файла
        fclose(f);
        cout << "\n\tВыполнена запись объектов в текстовый файл \"" << fileName << "\"\n";
        #pragma endregion

        #pragma region Чтение объектов из текстового файла
        cout << "\n\n\tЧтение объектов из текстового файл \"" << fileName << "\"\n\n";

        f = fopen(fileName, "r");
        if (!f) {
            sprintf(buf, "Не могу открыть файл \"%s\" для чтения", fileName);
            throw exception(buf);
        } // if

        // собственно чтение из текстового файла
        int i = 1;
        while(!feof(f)) {
            Toy toy;     // переменная для чтения из файла
            toy.get(f);  // чтение данных из файла в объект

            cout << "\tИгрушка" << i++ << ": " << toy << "\n";
        } // while

        // закрытие файла
        fclose(f);
        cout << "\n\tВыполнено чтение объектов из текстового файл \"" << fileName << "\"\n";
        #pragma endregion

        // освобождение памяти, выделенной объектам
        delete pToy1;
        delete pToy2;
        delete pToy3;

    	Toy toy1("Мячик", "ДонИгрушка", 40, 3, 45);
    	Toy toy2(toy1);

        cout << toy1 << "\n" << toy2 << "\n\n";
        foo(toy2);

        toy1 = bar(toy2);
        cout << toy1 << "\n\n";
    } catch (exception &ex) {
        cout << "\n\n" << ex.what() << "\n\n";
    } // try-catch

    getKey("\n\n\tНажмите любую клавишу для продолжения. . .");
    return 0;
} // main


void foo(Toy toy)
{
    cout << toy << "\n";
}

Toy bar(Toy toy)
{
    toy.setName("Кубик");
    return toy;
}