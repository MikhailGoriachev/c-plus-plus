#pragma once 

#include "head.h"

#pragma region Меню
void menu()
{
	int c;

	while (true)
	{
		// отчистка экрана 
		cls();

		// выключение курсора
		setCursorVisible(false);

		// смещение курсора
		gotoXY(40, 5);

		cout << "МЕНЮ" << endl;

		// смещение курсора
		gotoXY(10, 10);

		cout << "1. Задание 1" << endl;

		// смещение курсора
		gotoXY(10, 12);

		cout << "2. Задание 2" << endl;

		// смещение курсора
		gotoXY(40, 0);

		setColor(infoColor);
		cout << "ESC ВЫХОД" << endl;
		setColor(mainColor);
		while (true)
		{
			c = getKey("");

			// обработка ввода 
			switch (c)
			{
			case '1':
				task1();	// вызов первого задания 

				break;
			case '2':
				task2();	// вызов второго задания

				break;

			case 27:
				cls();
				return;		// выход из меню

			default:
				break;
			}
			break;
		}
	}
}
#pragma endregion 

#pragma region Задание 1

	//	Задача 1. Создайте класс, описывающий цилиндр Cylinder(поля радиус и высота, тип полей –double).
	//	Реализуйте конструкторы(по умолчанию, и инициирующий – задающий радиус и высоту цилиндра), 
	//	деструктор(выводящий сообщение «Cylinder : Объект уничтожен») геттеры и сеттеры(выбрасывать 
	//	исключение при нулевом или отрицательном значении параметра), методы, вычисляющие и 
	//	возвращающие площадь и объем цилиндра, метод вывода радиуса и высоты цилиндра в консоль, 
	//	метод вывода данных цилиндра(радиус, высоту, площадь поверхности и объем) в виде строки таблицы.
	//	Создайте массив из 8и цилиндров, радиус и высота – случайные числа.Выведите массив в консоль
	//	в табличном виде : радиус и высота цилиндра, площадь и объем.При выводе выделите цилиндр /
	//	цилиндры с объемом, равным максимальному, выводите также суммарный объем цилиндров, суммарную 
	//	площадь поверхности цилиндров.


void task1()
{
	cls();

	gotoXY(50, 2);

	cout << "Задание 1" << endl << endl;

	cout << "\t\tСоздайте класс, описывающую цилиндр TCylinder (поля радиус и высота,\n"
		<< "\t\tтип полей –double). Реализуйте конструкторы(по умолчанию, и инициирующий\n"
		<< "\t\t– задающий радиус и высоту цилиндра), деструктор(выводящий сообщение\n"
		<< "\t\t«Cylinder : Объект уничтожен») геттеры и сеттеры(выбрасывать исключение\n"
		<< "\t\tпри нулевом или отрицательном значении параметра)Реализуйте методы, вычисляющие\n"
		<< "\t\tи возвращающие площадь и объем цилиндра, метод вывода радиуса и высоты цилиндра\n"
		<< "\t\tв консоль, метод вывода данных цилиндра (радиус, высоту, площадь поверхности и объем) в \n"
		<< "\t\tвиде строки таблицы.\n\n"
		<< "\t\tСоздайте массив из 8и цилиндров, радиус и высота – случайные числа. \n"
		<< "\t\tВыведите массив в консоль в табличном виде : радиус и высота цилиндра, \n"
		<< "\t\tплощадь и объем. При выводе выделите цилиндр / цилиндры с объемом, равным\n"
		<< "\t\tмаксимальному, выводите также суммарный объем цилиндров? суммарную \n"
		<< "\t\tплощадь поверхности цилиндров.\n" << endl;

	// количество цилиндров
	size_t n;

	// ввод количество цилиндров
	cout << "\n\n\tВведите количество цилиндров: ";
	cin >> n;

	// создание цилиндров
	Cylinder* Cyl = new Cylinder[n];

	// генерирование случайных данных
	generCylinder(Cyl, n);

	// находение индекса цилиндра с максимальным объёмом
	int indexMax = maximumIndex(Cyl, n);

	showTableCylinder("\t\t\t\t\tРЕЗУЛЬТАТ\n", Cyl, n, indexMax);

	cout << "\t\t\t\t\t\t\t\tСуммарный объём: " << summV(Cyl, n) << endl;
	cout << "\t\t\t\t\t\t\t\tСуммарная площадь: " << summS(Cyl, n) << endl;

	delete[] Cyl;

	_getch();

}
#pragma endregion

#pragma region Задание 2

	//	Задача 2. Создайте класс, описывающий усеченный конус Conoid(поля радиус
	//	нижнего основания, радиус верхнего основания и высота, типполей – double).
	//	Реализуйте конструкторы(по умолчанию, и инициирующий – задающий радиусы и
	//	высоту усеченного конуса), деструктор(выводящий сообщение «Conoid : 
	//	Объект уничтожен») геттеры и сеттеры(выбрасывать исключение при нулевом или 
	//	отрицательном значении параметра).Реализуйте методы, вычисляющие и возвращающие
	//	площадь и объем усеченного конуса, метод вывода данных усеченного конуса(радиусы
	//	и высота, площадь поверхности и объем) в виде строки таблицы.
	//	Создайте массив из 5и усеченных конусов, радиусы и высота – случайные числа.Выведите
	//	массив в консоль в табличном виде : радиусы и высота, площадь и объем.При выводе 
	//	выделитеконус / конусы с площадью поверхности, равной максимальной, выводите также 
	//	суммарную площадь, объем усеченных конусов.


void task2()
{

	cls();

	gotoXY(50, 2);

	cout << "Задание 2" << endl;

	cout << "\t\tСоздайте структуру, описывающую усеченный конус TConoid (поля радиус\n"
		<< "\t\tнижнего основания, радиус верхнего основания и высота, тип полей – double).\n"
		<< "\t\tРеализуйте конструкторы(по умолчанию, и инициирующий – задающий радиусы и\n"
		<< "\t\tвысоту усеченного конуса), деструктор(выводящий сообщение «Conoid : \n"
		<< "\t\tОбъект уничтожен») геттеры и сеттеры(выбрасывать исключение при нулевом или \n"
		<< "\t\tотрицательном значении параметра).\n"
		<< "\t\tРеализуйте методы, вычисляющие и возвращающиеплощадь и объемусеченного конуса,\n"
		<< "\t\tметод вывода данных усеченного конуса (радиусы и высота, площадь поверхности и \n"
		<< "\t\tобъем) в виде строки таблицы.\n\n"
		<< "\t\tСоздайте массив из 5и усеченных конусов, радиусы и высота – случайные числа.\n"
		<< "\t\tВыведите массив в консоль в табличном виде : радиусы и высота, площадь и объем.При\n"
		<< "\t\tвыводе выделитеконус / конусы с площадью поверхности, равной минимальной, выводите \n"
		<< "\t\tтакже суммарную площадь, объем усеченных конусов.\n\n";

	// количество конусов
	int n;

	// ввод количества конусов
	cout << "\n\n\tВведите количество усечённых конусов: ";
	cin >> n;

	// массив структур конусов
	Conoid* cons = new Conoid[n];

	generConoid(cons, n);

	showTableConoids("\t\t\t\t\tРЕЗУЛЬТАТ\n", cons, n, minimumIndex(cons, n));

	cout << "\t\t\t\t\t\t\t\tСуммарный объём: " << summV(cons, n) << endl << endl;
	cout << "\t\t\t\t\t\t\t\tСуммарная площадь: " << summS(cons, n) << endl << endl;

	delete[] cons;

	_getch();

}
#pragma endregion
