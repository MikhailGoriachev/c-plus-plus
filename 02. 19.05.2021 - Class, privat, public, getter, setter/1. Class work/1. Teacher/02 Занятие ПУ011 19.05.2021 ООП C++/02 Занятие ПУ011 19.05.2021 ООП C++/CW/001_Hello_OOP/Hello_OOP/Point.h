#pragma once
#include "pch.h"

// точка на плоскости
class Point
{
// private:
	double x_; // поле / элемент / член класса - координата x
	double y_; // поле / элемент / член класса - координата y

	// проблема - выходная строка не д.б. длиннее 79 символов
	char buf_[80]; // служебное поле для перевода полей в строковый формат 

public:
	// конструктор по умолчанию
	Point():x_(), y_(), buf_("")   // список инициализации - выполняется до тела конструктора
	{
	    cout << "Point: конструктор по умолчанию\n";

		// x_ = y_ = 0;
		// buf_[0] = 0;

		// this - указатель, поле класса, указатель на текущий объект
		// this->x_ = this->y_ = 0;
		// this->buf_[0] = 0;
	}

	
	// конструктор(ы) инициализации (с параметрами)
	Point(double x, double y):x_(x), y_(y), buf_("")   // список инициализации - выполняется до тела конструктора
	{
		cout << "Point: инициирующий конструктор\n";

		// this - указатель, поле класса, указатель на текущий объект
		// this->x_ = x;
		// x_ = x;
		// y_ = y;
	} // Point

	// пример конструктора
	Point(double v): x_(v), y_(v), buf_("") {}

	// деструктор
	// единственный, без параметров, без типа
	~Point()
	{
		cout << "Point: деструктор\n";
	}

	// вывод полей на экран - метод класса
	void show(bool nl = true)
	{
		// cout << fixed << setprecision(2) << "x = " << x_ << "; y = " << y_ << (nl ? "\n" : "");
		cout << toString() << (nl ? "\n" : "");  // вызов метода класса в самом классе
	}

	// служебный метод - приведение полей объекта в строковое представление
	char *toString() 
	{
		// sprintf_s(buf, "x = %.2lf; y = %.2lf", x, y);
		sprintf(buf_, "x = %.2lf; y = %.2lf", x_, y_);

		return buf_;
	} // toString

	// методы доступа - аксессоры - accessors и мутаторы (геттеры и сеттеры)
	// геттер - getter - чтение значения поля - аксессор
	// сеттер - setter - установка значения поля - мутатор

	// поле X
	double getX() const   { return x_; }      // геттер - аксессор
	void   setX(double x) { this->x_ = x; }   // сеттер - мутатор
	
	double getY() const   { return y_; }      // геттер
	void   setY(double y) { this->y_ = y; }   // сеттер
};

