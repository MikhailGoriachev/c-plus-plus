// Напишите консольное приложение с использованием ООП по следующему заданию. 
// Создайте класс, описывающий дату: день, месяц, год. 
// Реализуйте конструкторы по умолчанию, с параметрами (день, месяц, год). 
// Разработайте геттеры и сеттеры.
// Перегрузите операции методами класса:
//     • Операция – разность двух дат, возвращает количество дней между датами
//     • Операция + добавление к дате заданного количества дней, возвращает дату
//     • Операции <, <=, ==, !=, >=, >
//     • Операции ++, -- возвращающие следующую и предыдущую даты соответственно
// Дружественной функцией перегрузите операцию вывода <<
// Обычной функцией перегрузите операцию ввода >> 
// Проверьте работу перегруженных операций в соответствующих пунктах меню приложения.

#include "pch.h"

#include "Utils.h"
#include "TDate.h"

// работа с датами, перегрузки операций
void demoDates();     

int main()
{
	// настройка вывода в консоль
	init(L"Занятие 31.05.2021 - работа с классом TDate, перегрузка операций");


    demoDates();
    
	return 0;
} // main



void demoDates()
{
    TDate date1(31, 12, 2018), date2(28, 2, 2016), date3;

    cout << "\n\nОперация сложения даты и целого числа (количество дней)\n";
    int days = getRand(1, 20);
    date3 = date1 + days;
    cout << "\nК дате " << date1 << " прибавили " << days << " дней. Новая дата: " << date3 << "\n\n";

    cout << "\n\nОперация сложения целого числа (количество дней) и даты\n";
    date3 = days + date2;
    cout << "\nК дням " << days << " прибавили " << date2 << ".      Новая дата: " << date3 << "\n\n";

    cout << "\n\nОперация вычитания даты из другой даты (количество дней между датами)\n";
    days = date3 - date1;
    cout << "\nМежду " << date1 << " и " << date3 << " прошло дней: " << days << "\n\n";

    cout << "\n\nОперация инкремент - вычисление следующей даты:\n";
    cout << "\nДата до инкремента           : " << date1 << "\n";
    cout << "Префиксный инкремента        : " << ++date1 << "\n";
    cout << "После префиксного инкремента : " << date1 << "\n";

    cout << "\nДата до инкремента           : " << date2 << "\n";
    cout << "Постфиксный инкремент        : " << date2++ << "\n";
    cout << "После постфиксного инкремента: " << date2 << "\n";

    cout << "\n\nОперация декремент - вычисление предыдующей даты:\n";
    cout << "\nДата до декремента           : " << date1 << "\n";
    cout << "Префиксный декремента        : " << --date1 << "\n";
    cout << "После префиксного декремента : " << date1 << "\n";

    cout << "\nДата до декремента           : " << date2 << "\n";
    cout << "Постфиксный декремент        : " << date2-- << "\n";
    cout << "После постфиксного декремента: " << date2 << "\n";

    // Проверка операций сравнения
    cout << boolalpha;
    cout << "\n\nОперации сравнения и отношения: < <= == != >= >\n";

    bool result = date1 < date2;
    cout << date1 << " <  " << date2 << " = " << result << "\n";

    result = date1 <= date2;
    cout << date1 << " <= " << date2 << " = " << result << "\n";

    result = date1 == date2;
    cout << date1 << " == " << date2 << " = " << result << "\n";

    result = date1 != date2;
    cout << date1 << " != " << date2 << " = " << result << "\n";

    result = date1 > date2;
    cout << date1 << " >  " << date2 << " = " << result << "\n";

    result = date1 >= date2;
    cout << date1 << " >= " << date2 << " = " << result << "\n";

    cout << "\n\n";
    getKey();
} // demoDates