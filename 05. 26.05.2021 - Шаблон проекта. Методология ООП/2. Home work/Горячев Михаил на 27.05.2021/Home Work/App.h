#pragma once
#include "pch.h"
#include "Conoid.h"

/*
*	Создайте класс, описывающий усеченный конус Conoid (поля радиус нижнего основания, радиус 
*	верхнего основания и высота, тип полей – double). Реализуйте конструкторы (по умолчанию, 
*	и инициирующий – задающий радиусы и высоту усеченного конуса), деструктор (выводящий 
*	сообщение «Conoid: Объект уничтожен») геттеры и сеттеры (выбрасывать исключение при нулевом
*	или отрицательном значении параметра). Реализуйте методы, вычисляющие и возвращающие площадь
*	и объем усеченного конуса, метод вывода данных усеченного конуса (радиусы и высота, площадь 
*	поверхности и объем) в виде строки таблицы.
*	Создайте динамический массив из n усеченных конусов, радиусы и высота – случайные числа. 
*	Размер массива вводите с клавиатуры.
*	Выведите массив в консоль в табличном виде: радиусы и высота, площадь и объем. При выводе
*	выделите конус/конусы с площадью поверхности, равноймаксимальной, выводите также суммарную 
*	площадь, и суммарный объем усеченных конусов.
*	Перегрузите операции методами класса:
*	•	+ сложение двух конусов, состоящую в сложении радиусов и высот двух конусов
*	•	* умножение радиусов и высот конуса на вещественное число, выбрасывать исключение при 
*		некорректной операции
*	•	– вычитание вещественного числа из радиусов и высоты конусов, выбрасывать исключение 
*		при некорректной операции
*	Перегрузите операции дружественными функциями класса:
*	•	>> операция ввода
*	•	<< операция вывода данных конуса (радиусы и высота, площадь поверхности и объем) в 
*		виде строки таблицы
*	Продемонстрируйте операцию ввода и сложения для двух конусов.
*	Выполните остальные операции со всеми элементами динамического массива конусов.
*	
*/

// TODO: прикладная часть - полезная работа приложения - бизнес-логика приложения
class App
{
public:

	// генерация данных усечённого конуса
	void generConoid(Conoid* conoid, size_t size);

	// нахождение минимальной площади конуса
	int maximumIndex(Conoid** conoid, size_t size);

	// сумма объёма
	double summV(Conoid* conoid, size_t size);

	// сумма площади
	double summS(Conoid* conoid, size_t size);

	// суммарная площадь
	double allSummV(Conoid** conoid, size_t size);

	// сумма площадь
	double allSummS(Conoid** conoid, size_t size);

	// вывод массива цилиндров в табличном формате, горизонтальная линия: — Alt+0151
	void showTableConoids(const char* title, Conoid** conoids, int n, int maxIndex);

	// Задание 1
	void task1();
};

