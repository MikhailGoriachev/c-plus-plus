#pragma once
#include "pch.h"
#include "Utils.h"
#include "menu.h"

#include <stack>
#include <queue>
#include <list>
#include <map>

#include "Bus.h"

/*
 * Задача 1.Напишите решения задач для развития навыков работы с контейнерными 
 * классами STL.Тип данных, который обрабатывается в задачах –int, коллекции 
 * заполнять случайными числами:
 * •	Дан непустой стек. Создать два новых стека, переместив в первый из них все 
 *		элементы исходного стека с четными значениями, а во второй — с нечетными 
 *		(элементы в новыхстеках будут располагаться в порядке, обратном исходному; 
 *		один из этихстеков может оказаться пустым). Вывести стеки до и после обработки.
 * •	Даны две непустые очереди. Перемещать элементы из начала первой очереди в конец
 *		второй, пока значение начального элемента первой очереди не станет четным (если
 *		 первая очередь не содержит четных элементов,то переместить из первой очереди во
 *		 вторую все элементы). Вывести очереди до и после обработки.
 * •	Дан двусвязный список, содержащий не менее двух элементов. Вывести этот список. 
 *		Продублировать в списке первый и последний элементы (новые элементы добавлять 
 *		перед существующими элементами),вывести преобразованный список.
 * 
 * Задача 2. Сведения о каждом автобусе содержат: регистрационный номер автобуса,
 * фамилию и инициалы водителя, назначенный номер маршрута, фактический номер маршрута.
 * 
 * Нахождение в парке – особый маршрут с номером «0», в состав номера маршрута входят 
 * как цифры, так и буквы, например – «42», «42а», «32в».Хранение всех необходимых коллекций
 * организовать с применением контейнерного класса map. В качестве ключа использовать значение 
 * поля «регистрационный номер автобуса», в качестве значения – собственно данные автобуса 
 * (т.е. map<string, Bus>).
 * 
 * Приложение должно обеспечивать выбор с помощью меню и выполнение одной изследующих функций:
 * •	начальное формирование коллекции данных обо всех автобусах, копирование этой коллекции 
 *		в коллекции автобусов, находящихся в парке, находящихся на маршруте, сохранение коллекции 
 *		всех автобусов в бинарном файле (если такого файла нет) и чтение данных в коллекцию из 
 *		бинарного файла (если такой файл есть);
 * •	имитация выезда автобуса из парка: вводится номер автобуса; удаляются данные об этом 
 *		автобусе из коллекции автобусов, находящихся в парке, и записывает эти данные в коллекцию 
 *		автобусов, находящихся на маршрутах; выводятся данные автобусов в парке и на маршруте; 
 *		корректируются данные в коллекции всех автобусов, измененные данные сохраняются в бинарном
 *		файле
 * •	имитация въезда автобуса в парк: вводится номер автобуса; удаляются данные об этом автобусе 
 *		из коллекции автобусов, находящихся на маршрутах, и записываются эти данные в коллекцию 
 *		автобусов, находящихся в парке;выводятся данные автобусов в парке и на маршруте; 
 *		корректируются данные в коллекции всех автобусов, измененные данные сохраняются в бинарном
 *		файле
 * •	вывод сведений обо всех автобусах, об автобусах, находящихся в парке, и об автобусах, 
 *		находящихся на маршрутах, упорядоченных по номерам маршрутов.
 * 
*/

// TODO: прикладная часть - полезная работа приложения - бизнес-логика приложения
class App
{
	// база автобусов
	map<string, Bus> mapBus_;

	// база автобусов в парке
	map<string, Bus> mapPark_;

	// база автобусов на райсе 
	map<string, Bus> mapVoy_;

	// имя файла для сохранения автобусов
	string busFile_ = "bus.bin";

public:

#pragma region Задание 1. Работа с контейнерами

	// Задание 1. Работа с контейнерами
	void task1();

	// вывод линии для таблицы
	void showLine();

	// вывод сообщения об отсутвии данных для таблицы
	void showEmpty();

#pragma region Stack

	// Разделение стека на стеки с отрицательными и положительными значениями
	void stackDemo();

	// заполнение стека 
	void fillStack(stack<int>& source, int n);

	// разделение стека на стеки с отрицательными и положительными значениями по заданию
	void separationStack(stack<int>& source, stack<int>& neg, stack<int>& pos);

	// вывод стека 
	void outStack(stack<int> source, string type, string descript, short colorElem);

#pragma endregion 

#pragma region Queue

	// Перемещение элементов из исходной очереди до четного значения
	void queueDemo();

	// перемещение элементов из исходной очереди до четного значения по заданию 
	void movingQueue(queue<int>& source, queue<int>& dest);

	// заполнение очереди
	void fillQueue(queue<int>& source, int n);

	// вывод очереди
	void outQueue(queue<int> source, string type, string descript, short colorElem);

#pragma endregion 

#pragma region List

	// Дублирование первого и последенго элементов в двусвязном списке
	void listDemo();

	// дублирование первого и последенго элементов в двусвязном списке по заданию
	void dublicationList(list<int>& source);

	// заполнение списка
	void fillList(list<int>& source, int n);

	// вывод списка
	void outList(list<int> source, string type, string descript, short colorElem);


#pragma endregion 

#pragma endregion 

#pragma region Задание 2. Автобусный парк

	// Задание 2. Автобусный парк
	void task2();

	// Начальное формирование коллекции данных обо всех автобусах
	void createPark();

	// Выезд автобуса из парка
	void exitBus();

	// выезд автобуса по заданию
	void exitBusMap(map<string, Bus>& mapBus, map<string, Bus>& mapPark, map<string, Bus>& mapVoy, string number);

	// Въезда автобуса в парк
	void entryBus();

	// въезд автобуса 
	void entryBussMap(map<string, Bus>& mapBus, map<string, Bus>& mapPark, map<string, Bus>& mapVoy, string number);

	// Вывод сведений обо всех автобусах
	void printAll();

	// вывод map автобусов
	void showBus(map<string, Bus>& mapBus, string name, string specific);

	// вывод шапки таблицы
	void showHeadBus(map<string, Bus>& mapBus, string name, string specific);

	// вывод map автобусов
	void showBus(multimap<string, Bus>& mapBus, string name, string specific);

	// вывод шапки таблицы
	void showHeadBus(multimap<string, Bus>& mapBus, string name, string specific);

	// вывод линии-разделителя
	void showLineBus();

	// вывод "пустоты" 
	void showEmptyBus();

	// вывод автобуса для таблицы
	void showBusElem(map<string, Bus>& mapBus);

	// вывод автобуса для таблицы
	void showBusElem(multimap<string, Bus>& mapBus);

	// сохранение map в файл 
	void saveMap(map<string, Bus>& mapBus, string nameFile);

	// загрузка map из файла 
	void loadMap(map<string, Bus>& mapBus, string nameFile);

	// проверка на наличие файла 
	bool isFile(string nameFile);

#pragma endregion 

};

