#pragma once
#include "pch.h"
#include "Utils.h"
#include "Airline.h"
#include "Plane.h"
#include "App.h"
#include "ShowOnePlaneTable.h"

/*
	Напишите консольное многофайловоеприложение с использованием ООП по следующему заданию. Примените 
	меню из классной работы для организации простого интерфейса пользователя.
	Разработайте класс Plane с полями для хранения:
	•	производителя и типа самолета (например: Ил-76, Boeing 747, …)
	•	количества пассажирских мест (от 0 до 1000)
	•	текущее количество пассажиров (от 0 до количества пассажирских мест)
	•	расхода горючего за час полета (вещественное число, от 0.1 до 20000 кг/ч)
	•	дальность полета самолета (от 1000 до 20000 км)
	•	регистрационный номер самолета (например: UR-DAD, UR-CCF, …).
	В классеPlane разработать:
	•	Конструкторы: по умолчанию, с параметрами (explicit), копирующий, деструктор
	•	Геттеры и сеттеры для всех полей класса, в сеттерахвыбрасывать исключение при 
	обнаружении некорректного значения
	•	Метод, вычисляющий расход горючего за час полета на одно пассажирское место (поделить расход 
	горючего за час на количество пассажирских мест)
	•	Перегрузить операцию вывода <<
	Разработайте класс Airline, представляющий авиакомпанию. Поля класса:
	•	название компании
	•	динамический массив самолетов – объектов класса Plane
	•	количество самолетов в массиве
	Реализуйте для класса Airline:
	•	инициализацию массива самолетов
	•	вывод данных авиакомпании в табличном формате – перегрузите операцию вывода <<
	•	вывод данных авиакомпании в табличном виде с выделением цветом самолетов с максимальной и 
	минимальной дальностями полета
	•	методом класса перегрузите унарную операцию * для сортировки массива самолетов по дальности полета
	•	методом класса перегрузите бинарную операцию * для сортировки массива самолетов при помощи 
	компаратора (объявление метода
	Airline&operator*(intcomparer(constPlane&plane1, constPlane&plane2)); продемонстрируйте сортировку 
	по текущему количеству пассажиров, по регистрационному номеру, по часовому расходу горючего
	•	методом класса перегрузите бинарную операцию &для добавления самолета в конец массива, операнды 
	не меняются, возвращается ссылка на измененный объект
	•	методом класса перегрузите унарную операцию !для  удаления первого самолета из массива (элемента с индексом 0)
	•	методом класса перегрузите бинарную операцию !!для удаления самолета из массива по числовому индексу
	•	методом класса перегрузите бинарную операцию !!для удаления самолета из массива по регистрационному номеру
	•	методом класса перегрузите операцию () для вставки по заданному индексу самолета (самолеты правее 
	заданной позиции сдвигаются к концу массива)
	Продемонстрируйте работу разработанных операций, методов. Комментирование кода – обязательное требование.
*/

// TODO: прикладная часть - полезная работа приложения - бизнес-логика приложения
class App
{
	// объект класса Airline
	Airline air;

	// компаратор сравнения по текущему количеству пассажиров
	static int compareByCount_passengers(const Plane& pl1, const Plane& pl2);

	/// компаратор сравнения по регистрационному номеру
	static int compareByNumber(const Plane& pl1, const Plane& pl2);

	/// компаратор сравнения по часовому расходу горючего
	static int compareByFuel(const Plane& pl1, const Plane& pl2);

public:

#pragma region Конструкторы и деструктор
	// конструктор по умолчанию 
	explicit App();

	// копирующий конструктор
	App(App& app) = default ;

	// деструктор
	~App() = default;

#pragma endregion

#pragma region Вывод самолётов

	// Вывод самлётов
	void outPlanes();
	
	// Вывод самолёта по индексу
	void outPlaneIndex();

	// Вывод данных авиакомпании в табличном виде с выделением цветом
	// самолетов с максимальной и минимальной дальностями полета
	void outTableColor();

#pragma endregion
		
#pragma region Сортировки самолётов

	// Сортировка самолёта по текущему количеству пассажиров
	void sortByCountPassangers();

	// Сортировка самолёта по регистрационному номеру
	void sortByNumber();

	// Сортировка самолёта по часовому расходу горючего
	void sortByFuel();

	// Сортировка самолёта по дальности полёта
	void sortByDistance();

#pragma endregion

#pragma region Изменения массива самолётов

	// добавление самолёта в массив
	void addPlane();

	// методом класса перегрузите унарную операцию !для  удаления первого самолета из массива(элемента с индексом 0)
	void deleteFirstPlane();

	// методом класса перегрузите бинарную операцию !!для удаления самолета из массива по числовому индексу
	void deletePlaneByIndex();

	// методом класса перегрузите бинарную операцию !!для удаления самолета из массива по регистрационному номеру
	void deletePlaneByNumber();

	// методом класса перегрузите операцию() для вставки по заданному индексу самолета(самолеты правее
	// заданной позиции сдвигаются к концу массива)
	void insertPlaneByIndex();

#pragma endregion

#pragma region Перегрузка операций

#pragma endregion

};

