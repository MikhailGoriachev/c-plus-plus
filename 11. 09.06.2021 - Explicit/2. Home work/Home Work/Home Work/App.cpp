#include "App.h"
// конструктор по умолчанию 
App::App() 
{
	air = Airline("Аэрофлот — Российские авиалинии", 5);

	// инициализация 
	air[0] = Plane("Airbus А380", 525, 345, 12000, 275'000'000, 15000, "F - WWOW");
	air[1] = Plane("Boeing 747", 452, 400, 10700, 266'000'000, 12000, "B - 18215");
	air[2] = Plane("Boeing 777", 550, 500, 13500, 280'000'000, 13000, "G - YMMM");
	air[3] = Plane("Airbus A320", 150, 115, 2100, 93'900'000, 10000, "F - GFKC");
	air[4] = Plane("Airbus A318", 132, 86, 2150, 65'000'000, 11000, "D - APWG");
}

// Вывод самлётов
void App::outPlanes()
{
	cls();

	cout << air << "\n\n\n";

	getKey();
}

// Вывод самолёта по индексу
void App::outPlaneIndex()
{
	cls();

	// индекс
	int index;

	// ввод индекса 
	cout << "\n\n\t\tВведите индекс [0 ... " << air.getCountPlane() - 1 << "]: ";
	cin >> index;

	// вывод 
	cout << showOnePlaneTable(air[index]) << "\n";

	getKey();
}

// Сортировка самолёта по текущему количеству пассажиров
void App::sortByCountPassangers()
{
	cls();

	// вывод списка самолётов до сортировки
	cout << "\n\t\t\t\t\tДо сортировки\n" << air << "\n\n\n\n";

	getKey();

	// сортировка 
	air = air * compareByCount_passengers;

	cls();

	// вывод списка самолётов после сортировки
	cout << "\n\t\t\t\t\tОтсортированный список самолётов\n" << air << "\n\n\n\n";

	getKey();
}

// Сортировка самолёта по регистрационному номеру
void App::sortByNumber()
{
	cls();

	// вывод списка самолётов до сортировки
	cout << "\n\t\t\t\t\tДо сортировки\n" << air << "\n\n\n\n";

	getKey();

	// сортировка 
	air = air * compareByNumber;

	cls();

	// вывод списка самолётов после сортировки
	cout << "\n\t\t\t\t\tОтсортированный список самолётов\n" << air << "\n\n\n\n";

	getKey();
}

// Сортировка самолёта по часовому расходу горючего
void App::sortByFuel()
{
	cls();

	// вывод списка самолётов до сортировки
	cout << "\n\t\t\t\t\tДо сортировки\n" << air << "\n\n\n\n";

	getKey();

	// сортировка 
	air = air * compareByFuel;

	cls();

	// вывод списка самолётов после сортировки
	cout << "\n\t\t\t\t\tОтсортированный список самолётов\n" << air << "\n\n\n\n";

	getKey();
}

// Сортировка самолёта по дальности полёта
void App::sortByDistance()
{
	cls();

	// вывод списка самолётов до сортировки
	cout << "\n\t\t\t\t\tДо сортировки\n" << air << "\n\n\n\n";

	getKey();

	// сортировка 
	air = *air;

	cls();

	// вывод списка самолётов после сортировки
	cout << "\n\t\t\t\t\tОтсортированный список самолётов\n" << air << "\n\n\n\n";

	getKey();
}

// компаратор сравнения по текущему количеству пассажиров
int App::compareByCount_passengers(const Plane& pl1, const Plane& pl2)
{
	int pl_1 = pl1.getCount_passengers();
	int pl_2 = pl2.getCount_passengers();

	return  pl_1 > pl_2 ? 1 : pl_1 < pl_2 ? -1 : 0;
}

/// компаратор сравнения по регистрационному номеру
int App::compareByNumber(const Plane& pl1, const Plane& pl2)
{
	// сравнение двух полей типа char*
	return strcmp(pl1.getNumber(), pl2.getNumber());
}

/// компаратор сравнения по часовому расходу горючего
int App::compareByFuel(const Plane& pl1, const Plane& pl2)
{
	int pl_1 = pl1.getFuel();
	int pl_2 = pl2.getFuel();

	return  pl_1 > pl_2 ? 1 : pl_1 < pl_2 ? -1 : 0;
}


// Вывод данных авиакомпании в табличном виде с выделением цветом
// самолетов с максимальной и минимальной дальностями полета
void App::outTableColor()
{
	cout << "\t\t\t\t\t" << air.getNameCompany() << "\n"
		<< "+———————————————+————————————+————————————+————————————————+———————————————————+———————————————————+———————————————————+\n"
		<< "|     Модель    |  Пассажир. | Пассажиров | Расх. горючего |     Стоимость     |  Дальность полёта |  Регистрис. номер |\n"
		<< "|               |    мест    |            |     кг/ч       |      самолёта     |      самолёта     |      самолёта     |\n"
		<< "+———————————————+————————————+————————————+————————————————+———————————————————+———————————————————+———————————————————+\n";

	// если в компании нет самолётов
	if (air.getCountPlane() == 0)
	{
		cout << "|                                                    НЕТ САМОЛЁТОВ                                                     |\n"
			// нижняя строка 
			<< "+———————————————+————————————+————————————+————————————————+———————————————————+———————————————————+———————————————————+\n";
	}

	// текущий цвет
	const short cl = getColor();

	// вывод самолётов
	for (int i = 0; i < air.getCountPlane(); i++)
	{
		// самолёт с минимальной дальностью полёта
		Plane minDist = -air;

		// самолёт с минимальной дальностью полёта
		Plane maxDist = +air;

		// цвет вывода текущего самолёта
		setColor((air.getPlanes())[i] == minDist ? errColor : (air.getPlanes())[i] == maxDist ? infoColor : cl);

		// вывод в цвете
		cout << air[i];

		setColor(cl);

		// нижняя строка 
		cout << "+———————————————+————————————+————————————+————————————————+———————————————————+———————————————————+———————————————————+\n";
	}

	cout << "\n\n" << color(errColor) << "Минимальная дальность полёта\n\n" << color(infoColor)
		<< "Максимальная дальность полёта\n\n" << color(cl);

	getKey();
}

#pragma region Изменение массива самолётов 10.06.2021

// добавление самолёта в массив
void App::addPlane()
{
	cls();

	cout << "\n\t\t\t\t\tДобавление самолёта. До:" << air << "\n\n\n\n";

	getKey();

	// новый объект Plane
	Plane newPlane("Boeing 739", 413, 124, 11400, 243'000'000, 19000, "Z - 18215");

	// добавление 
	air = air & newPlane;

	cls();

	cout << "\n\t\t\t\t\tДобавление самолёта. До:" << air << "\n\n\n\n";

	getKey();
}

// методом класса перегрузите унарную операцию !для  удаления первого самолета из массива(элемента с индексом 0)
void App::deleteFirstPlane()
{
	cls();

	cout << "\n\t\t\t\tУдаление первого самолёта из массива\nДо удаления:\n\n"
		<< air << "\n\n\n\n";

	getKey();

	// удаление первого самолёта из массива самолётов
	air = !air;

	cls();

	cout << "\n\t\t\t\tУдаление первого самолёта из массива\nПосле удаления:\n\n"
		<< air << "\n\n\n\n";

	getKey();
}

// методом класса перегрузите бинарную операцию !!для удаления самолета из массива по числовому индексу
void App::deletePlaneByIndex()
{
	cls();

	cout << "\n\t\t\t\tУдаление самолёта по индексу из массива\nДо удаления:\n\n"
		<< air << "\n\n\n\n";

	// индекс
	int index;

	// ввод индекса 
	cout << "\n\n\t\tВведите индекс [0 ... " << air.getCountPlane() - 1 << "]: ";
	cin >> index;

	// удаление самолета из массива по числовому индексу
	air = air || index;

	cls();

	cout << "\n\t\t\t\tУдаление самолёта по индексу из массива\nПосле удаления:\n\n"
		<< air << "\n\n\n\n";

	getKey();

}

// методом класса перегрузите бинарную операцию !!для удаления самолета из массива по регистрационному номеру
void App::deletePlaneByNumber()
{
	cls();

	cout << "\n\t\t\t\tУдаление самолёта по индексу из массива\nДо удаления:\n\n"
		<< air << "\n\n\n\n";

	// номер самолёта
	char* number = new char[Plane::NUMBER_SIZE];

	// ввод номера 
	cout << "\n\n\t\tВведите номер самолёта: ";
	cin.ignore(cin.rdbuf()->in_avail());	// отчистка буфера 
	cin.getline(number, Plane::NUMBER_SIZE);

	// удаление первого самолёта из массива самолётов
	air = air || number;

	cls();

	cout << "\n\t\t\t\tУдаление самолёта по индексу из массива\nПосле удаления:\n\n"
		<< air << "\n\n\n\n";

	getKey();

}

// методом класса перегрузите операцию() для вставки по заданному индексу самолета(самолеты правее
// заданной позиции сдвигаются к концу массива)
void App::insertPlaneByIndex()
{
	cls();

	cout << "\n\t\t\t\tДобавление самолёта по индексу в массив\nДо удаления:\n\n"
		<< air << "\n\n\n\n";

	// индекс
	int index;

	// ввод индекса 
	cout << "\n\n\t\tВведите индекс [0 ... " << air.getCountPlane() - 1 << "]: ";
	cin >> index;

	Plane newPlane = Plane("Boeing 739", 413, 124, 11400, 243'000'000, 19000, "Z - 18215");

	// удаление самолета из массива по числовому индексу
	air = air(index, newPlane);

	cls();

	cout << "\n\t\t\t\tДобавление самолёта по индексу в массив\nПосле удаления:\n\n"
		<< air << "\n\n\n\n";

	getKey();

}

#pragma endregion

