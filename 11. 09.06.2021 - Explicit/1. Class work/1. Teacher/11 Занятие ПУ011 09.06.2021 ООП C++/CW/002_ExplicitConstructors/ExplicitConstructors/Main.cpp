// Конструкторы Imlicit и Explicit
#include "pch.h"
#include "Utils.h"
#include "A.h"
#include "B.h"
#include "C.h"

int main()
{
	// настройка вывода в консоль
	Init(L"26.05.2021 - явный вызов конструктора");
    
    // !!!!! explicit разрешает только один синтаксис объявления объектов - вызов конструктора !!!!
    // !!!!! implicit-правило действует по умолчанию разрешает все синтаксисы объявления 
    //       объектов - и список инициализации и вызов конструктора !!!!

    // Неявный вызов конструктора - могут называть неявным приведением типа
    // int приводится к A или, другими словами, компилятор
    // преобразует код A a = 100 к вызову конструктора A a(100)
    // Один параметр не обязательно, м.б. список C c = {списокИнициализации};
    A a = 100;         // неявный вызов конструктора с параметрами, implicit
    A a1(101);    // явный вызов конструктора с параметрами, explicit
    A a2{ 102 };    // явный вызов конструктора с параметрами, explicit
    A a3 = { 103 };    // неявный вызов конструктора с параметрами
    cout << "\n\nОбъекты класса A: " << a << ", " << a1 << ", " << a2 << ", " << a3 << "\n\n";
    
    // Неявный вызов конструктора запрещен (неявное приведение типа запрещено), 
    // т.к. используется explicit-конструктор
    // Допустим только явный вызов конструктора
    // B b0;         // нет ошибки компиляции, разрешен неявный вызов конструктора по умолчанию  
    // B b1 = 101;   // ошибка компиляции 
    B b(101), b1{102};   // явный вызов конструктора
    cout << "Объект класса B: " << b << ", " << b1 << "\n\n";
    
    // Список инициализации запрещается использовать для
    // explicit-конструкторов, только явный вызов конструктора
    // C c0 = {101., -102}; // ошибка компиляции
    C c0(101., -102);   // это явный вызов конструктора
    C c(101., -102);    // это явный вызов конструктора
    C c1{106., -402};   // это тоже явный вызов конструктора, C11/C14/C17/C20
    cout << "Объекты класса C: " << c0 << "; " << c << "; " << c1 << "\n\n";
  
	// ------------------------------------------------------------------
    cout << pos(0, 20);
    GetKey();
	return 0;
} // main