#pragma once
#include "pch.h"
#include "Utils.h"
#include "Airline.h"
#include "Plane.h"
#include "App.h"
/*
	Напишите консольное многофайловое приложение с использованием ООП по следующему 
	заданию. Примените меню из классной работы для организации простого интерфейса пользователя.
	Разработайте класс Plane с полями для хранения:
	•	производителя и типа самолета (например: Ил-76, Boeing 747, …)
	•	количества пассажирских мест (от 0 до 1000)
	•	текущее количество пассажиров (от 0 до количества пассажирских мест)
	•	расхода горючего за час полета (вещественное число, от 0.1 до 20000 кг/ч)
	•	стоимости самолета (от 1 до 300 000 000)
	•	регистрационный номер самолета (например: UR-DAD, UR-CCF, …).
	В классе Plane разработать:
	•	Конструкторы: по умолчанию, с параметрами, копирующий, деструктор
	•	Геттеры и сеттеры для всех полей класса, в сеттерахвыбрасывать исключение
	при обнаружении некорректного значения
	•	Метод, вычисляющий расход горючего за час полета на одно пассажирское место
	(поделить расход горючего за час на количество пассажирских мест)
	•	Переопределить операции:
	o	+ добавление заданного количества пассажиров
	o	–уменьшение количества пассажиров на заданное значение
	o	операции сравнения: <<= == != >= > для сравнения двух объектов по стоимости самолета
	Разработайте класс Airline, представляющий авиакомпанию. Поля класса:
	•	название компании
	•	динамический массив самолетов – объектов класса Plane
	•	количество самолетов в массиве
	Реализуйте:
	•	инициализацию массива самолетов
	•	вывод данных авиакомпании в табличном формате – перегрузите операцию вывода <<
	•	добавьте по 10 пассажиров каждому самолету компании
	•	уменьшите количество пассажиров каждого самолета на 3
	•	методом класса перегрузите унарную операцию ! для поиска первого самолета с 
	максимальной стоимостью
	•	дружественной функцией перегрузите унарную операцию – для поиска первого самолета
	с минимальной стоимостью
	•	методом класса перегрузите бинарную операцию * для увеличения стоимости самолетов
	на заданный коэффициент (положительный, например, 1.5 – удорожание в полтора раза)
	•	методом класса перегрузите операцию [] для доступа к элементам массива самолетов,
	продемонстрируйте работу этой операции
	Комментирование кода – обязательное требование.
*/

// вывод одного самолёта 
class showOnePlaneTable
{
	Plane plane_;

public:
	showOnePlaneTable() = default;

	showOnePlaneTable(Plane plane) :plane_(plane) {}

	friend ostream& operator<<(ostream& os, showOnePlaneTable show)
	{
		os << "\t+———————————————+————————————+————————————+————————————————+———————————————————+———————————————————+\n"
			<< "\t|     Модель    |  Пассажир. | Пассажиров | Расх. горючего |     Стоимость     |  Регистрис. номер |\n"
			<< "\t|               |     мест   |            |     кг/ч       |      самолёта     |      самолёта     |\n"
			<< "\t+———————————————+————————————+————————————+————————————————+———————————————————+———————————————————+\n"
			<< show.plane_
			<< "\t+———————————————+————————————+————————————+————————————————+———————————————————+———————————————————+\n";

		return os;
	}
};


// TODO: прикладная часть - полезная работа приложения - бизнес-логика приложения
class App
{
	// объект класса Airline
	Airline air;

public:

	// конструктор по умолчанию 
	App()
	{
		air = Airline("Аэрофлот — Российские авиалинии", 5);

		// инициализация 
		air[0] = Plane("Airbus А380", 525, 345, 12000, 489000000,"F - WWOW");
		air[1] = Plane("Boeing 747", 452, 400, 10700, 266000000, "B - 18215");
		air[2] = Plane("Boeing 777", 550, 500, 13500, 330000000, "G - YMMM");
		air[3] = Plane("Airbus A320", 150, 115, 2100, 93900000, "F - GFKC");
		air[4] = Plane("Airbus A318", 132, 86, 2150, 65000000, "D - APWG");
	}

	// Вывод самлётов
	void outPlanes()
	{
		cls();

		cout << air << "\n\n\n";

		getKey();
	}
	
	// Вывод самолёта по индексу
	void outPlaneIndex()
	{
		cls();

		// индекс
		int index;

		// ввод индекса 
		cout << "\n\n\t\tВведите индекс: ";
		cin >> index;

		// вывод 
		cout << showOnePlaneTable(air[index]) << "\n";

		getKey();
	}
		
	// Добавление по 10 пассажиров каждому самолету компании
	void addTenPlanes()
	{
		cls();

		cout << "\n\t\t\t\tДо прибавления 10 пассажиров к каждому самолёту\n" << air << "\n\n\n";

		getKey();

		// Добавление по 10 пассажиров каждому самолету компании
		for (size_t i = 0; i < air.getCountPlane(); i++)
		{
			air[i].setCount_passengers(air[i].getCount_passengers() + 10);
		}

		cls();

		cout << "\n\t\t\t\tПосле прибавления 10 пассажиров к каждому самолёту\n" << air << "\n\n\n";

		getKey();
	}

	// Уменьшение количества пассажиров каждого самолета на 3
	void decThreePlanes()
	{
		cls();

		cout << "\n\t\t\t\tДо уменьшения пассажиров на 3 у каждого самолёта\n" << air << "\n\n\n";

		getKey();

		// Уменьшение количества пассажиров каждого самолета на 3
		for (size_t i = 0; i < air.getCountPlane(); i++)
		{
			air[i].setCount_passengers(air[i].getCount_passengers() -3);
		}

		cls();

		cout << "\n\t\t\t\tПосле уменьшения пассажиров на 3 у каждого самолёта\n" << air << "\n\n\n";

		getKey();

	}

	// Поиск первого самолета с максимальной стоимостью
	void searchMaxPrice()
	{
		cls();

		cout << "\n\t\tПервый самолет с максимальной стоимостью\n\n" << showOnePlaneTable(!air) << "\n\n\n\n";

		getKey();
	}

	// Поиск первого самолета с минимальной стоимостью
	void searchMinPrice()
	{
		cls();

		cout << "\n\t\tПервый самолет с минимальной стоимостью\n\n" << showOnePlaneTable(-air) << "\n\n\n\n";

		getKey();
	}

	// Увеличения стоимости самолетов на заданный коэффициент
	void increasCoefPlanes()
	{
		cls();

		double coef;

		cout << "\n\t\t\t\tУвеличения стоимости самолетов на заданный коэффициент\n\n" << air << "\n\n\n";

		cout << "Введите коэффициент: ";
		cin >> coef;

		// если коеффициент меньше или равен нулю
		if (coef <= 0.)
		{
			throw exception("Коеффициент должен быть больше нуля!");
		}

		getKey();

		// Увеличения стоимости самолетов на заданный коэффициент
		air = air * coef;

		cls();

		cout << "\n\t\t\t\tПосле увеличения стоимости самолетов на заданный коэффициент" << air << "\n\n\n";

		getKey();
	}
};

