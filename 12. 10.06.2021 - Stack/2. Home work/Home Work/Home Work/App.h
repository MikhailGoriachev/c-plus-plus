#pragma once
#include "pch.h"
#include "Utils.h"
#include "StackDbl.h"
#include "StackPlane.h"

/*	
	Разработать приложение с использованием меню для закрепления работы со стеком, очередью. 
	Для решения задач разработайте классы StackDblдля хранения данных типа double в динамическом
	массиве (размер массива задается в конструкторе и в дальнейшем не меняется, размер по 
	умолчанию – 12 элементов), StackPlane для хранения данных типа Plane (класс из предыдущего 
	задания, стек на базе статического массива, размер 10 элементов).Стеки StackDbl, StackPlane 
	реализуйте на основе класса Stackиз классной работы.
	Задача 1.	Даны два непустых стека вещественных (double) чисел. Переместить все элементы из
		первого стека во второй (в результате элементы первого стека будут располагаться во втором 
		стеке в порядке, обратном исходному). Если в первом стеке слишком много элементов, выполняйте 
		перемещение до заполнения второго стека.
	Задача 2.	Даны два непустых стека вещественных (double) чисел. Перемещать элементы из первого
		стека во второй, пока значение вершины первого стека не станет отрицательным (перемещенные элементы
		первого стека будут располагаться во втором стеке в порядке, обратном исходному). Если в первом
		стеке нет отрицательных элементов, то переместить из первого стека во второй все элементы. Если в первом стеке слишком много элементов, выполняйте перемещение до заполнения второго стека.
	Задача 3.	Дан непустой стек вещественных (double) чисел. Создать два новых стека, переместив 
		в первый из них все элементы исходного стека с положительными значениями, а во второй — с 
		отрицательными (элементы в новых стеках будут располагаться в порядке, обратном исходному; один 
		из этих стеков может оказаться пустым).
	Задача 4.	Дан непустой стек StackPlane. Переместить данные до самолета с заданным с клавиатуры 
		регистрационным номером в новый стек типа StackPlane.
	Задача 5.	Усложненное. Дан непустой стек StackPlane.Переместить из этого стека в новый стек все 
		самолеты с заданным с клавиатуры диапазоном дальности полета. Исходный стек не должен измениться.
		Можно использовать вспомогательный стек – динамическую переменную.
*/


// TODO: прикладная часть - полезная работа приложения - бизнес-логика приложения
class App
{
public:

#pragma region Конструкторы и декструктор

	explicit App() = default;

	App(const App& app) = default;

	~App() = default;

#pragma endregion

#pragma region Задания
	
#pragma region Задание 1
	void task1();
#pragma endregion
	
#pragma region Задание 2
	void task2();
#pragma endregion
	
#pragma region Задание 3
	void task3();
#pragma endregion
	
#pragma region Задание 4
	void task4();
#pragma endregion
	
#pragma region Задание 5
	void task5();
#pragma endregion
	
#pragma endregion

#pragma region Общие методы

	// заполнение стека вещественными числами
	void fillStack(StackDbl& stack, int size);

#pragma endregion
	
};

